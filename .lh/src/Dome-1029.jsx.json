{
    "sourceFile": "src/Dome-1029.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1698604798720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1698604798720,
            "name": "Commit-0",
            "content": "import { useCallback } from 'react'\r\nimport { useRef } from 'react'\r\nimport { useState, useEffect } from 'react'\r\n// import Hls from 'hls.js'\r\nimport * as THREE from 'three'\r\n\r\nexport default function Dome({ photoIndex, setPhotoIndex, mediaPath, mediaDb }) {\r\n  const [videoElement, setVideoElement] = useState()\r\n  const [texture, setTexture] = useState()\r\n  const [videoPaused, setVideoPaused] = useState(false)\r\n  const [videoMuted, setVideoMuted] = useState(true)\r\n  const [mediaType, setMediaType] = useState()\r\n  const initDone = useRef(false)\r\n\r\n  const sel = (e) => document.querySelector(e)\r\n  const pause$ = sel('.btn--pause')\r\n  const vol$ = sel('.btn--vol')\r\n  let _texture = {}\r\n\r\n  useEffect(() => {\r\n    console.log('index: ' + photoIndex)\r\n    // let _texture = {}\r\n    const _mediaType = mediaDb[photoIndex].type\r\n    const file = mediaPath + mediaDb[photoIndex].src\r\n    if (_mediaType === 'video') {\r\n      //  hls.loadSource(file)\r\n      //  hls.attachMedia(videoElement)\r\n      //  hls.on(Hls.Events.MANIFEST_PARSED, () => {\r\n      //    videoElement.play()\r\n      //  })\r\n      const _videoElement = document.createElement('video')\r\n      _videoElement.crossOrigin = 'Anonymous'\r\n      _videoElement.loop = true\r\n      _videoElement.muted = true\r\n      _videoElement.volume = 0.5\r\n      _videoElement.src = file\r\n      _videoElement.load()\r\n      if (!videoPaused) {\r\n        // _videoElement.play()\r\n      } else {\r\n        pause$.style.opacity = 1\r\n        setVideoPaused(!videoPaused)\r\n      }\r\n      _videoElement.play()\r\n      _texture = new THREE.VideoTexture(_videoElement)\r\n      setVideoElement(_videoElement)\r\n      // console.log('video')\r\n    } else if (_mediaType === 'image') {\r\n      _texture = new THREE.TextureLoader().load(file)\r\n      // console.log('image')\r\n    }\r\n    _texture.mapping = THREE.EquirectangularReflectionMapping\r\n    _texture.colorSpace = THREE.SRGBColorSpace\r\n    _texture.minFilter = _texture.magFilter = THREE.LinearFilter\r\n    setTexture(_texture)\r\n    setMediaType(_mediaType)\r\n    return () => {\r\n      if (initDone.current) _texture.dispose()\r\n      // else initDone.current = true\r\n    }\r\n  }, [photoIndex, mediaType])\r\n\r\n  useEffect(() => {\r\n    function handler() {\r\n      console.log('handler')\r\n      if (mediaType === 'video') {\r\n        console.log('is video')\r\n        if (videoPaused) {\r\n          pause$.style.opacity = 1\r\n          videoElement.play()\r\n          // console.log('pl', videoElement.play)\r\n        } else {\r\n          pause$.style.opacity = 0.3\r\n          // console.log('pa')\r\n          videoElement.pause()\r\n        }\r\n        setVideoPaused(!videoPaused)\r\n      }\r\n    }\r\n    pause$.addEventListener('click', handler)\r\n    return () => pause$.removeEventListener('click', handler)\r\n  }, [videoPaused, videoElement, mediaType])\r\n\r\n  useEffect(() => {\r\n    function handler() {\r\n      vol$.style.opacity = videoMuted ? 1 : 0.3\r\n      setVideoMuted(!videoMuted)\r\n      console.log('mm')\r\n    }\r\n    vol$.addEventListener('click', handler)\r\n    return () => vol$.removeEventListener('click', handler)\r\n  }, [videoMuted])\r\n\r\n  return (\r\n    <>\r\n      <mesh position={[0, 0, 0]} scale-x={-1}>\r\n        <sphereGeometry attach=\"geometry\" args={[100, 100, 100]} />\r\n        <meshBasicMaterial attach=\"material\" toneMapped={false} map={texture} side={THREE.BackSide} onUpdate={(self) => (self.needsUpdate = true)} />\r\n      </mesh>\r\n    </>\r\n  )\r\n}\r\n"
        }
    ]
}