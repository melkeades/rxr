{
    "sourceFile": "src/Hud.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1697433253728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697433306597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,19 +6,19 @@\n import { useXR } from '@coconut-xr/natuerlich/react'\r\n \r\n export default function Hud({ setOrbitControl, setPhotoIndex }) {\r\n   const { gl, camera } = useThree()\r\n-  const isPresenting = !useXR.getState().mode === 'none'\r\n   // let pre = { position: [0, 0, -20], rotation: [10, 0, 1] }\r\n   const [props, set] = useSpring(() => ({\r\n     position: [0, 0, 0],\r\n     rotation: [0, 0, 0],\r\n     config: { mass: 1, friction: 20, tension: 50 },\r\n   }))\r\n   let xp, yp, zp, xr, yr, zr\r\n   useFrame(() => {\r\n-    const getCamera = isPresenting ? pre : camera\r\n-    // const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n+  const isPresenting = !useXR.getState().mode === 'none'\r\n+    // const getCamera = isPresenting ? pre : camera\r\n+    const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n     // const getCamera = camera\r\n     const { x, y, z } = getCamera.position\r\n     const { x: rotX, y: rotY, z: rotZ } = getCamera.rotation\r\n \r\n"
                },
                {
                    "date": 1697433422453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     config: { mass: 1, friction: 20, tension: 50 },\r\n   }))\r\n   let xp, yp, zp, xr, yr, zr\r\n   useFrame(() => {\r\n-    const isPresenting = !useXR.getState().mode === 'none'\r\n+    const isPresenting = useXR.getState().mode !== 'none'\r\n     // const getCamera = isPresenting ? pre : camera\r\n     const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n     // const getCamera = camera\r\n     const { x, y, z } = getCamera.position\r\n"
                },
                {
                    "date": 1697433508666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n   let xp, yp, zp, xr, yr, zr\r\n   useFrame(() => {\r\n     const isPresenting = useXR.getState().mode !== 'none'\r\n     // const getCamera = isPresenting ? pre : camera\r\n-    const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n-    // const getCamera = camera\r\n+    // const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n+    const getCamera = gl.xr.getCamera(camera)\r\n     const { x, y, z } = getCamera.position\r\n     const { x: rotX, y: rotY, z: rotZ } = getCamera.rotation\r\n \r\n     xp = camera.position.x\r\n"
                }
            ],
            "date": 1697433253728,
            "name": "Commit-0",
            "content": "import { Suspense } from 'react'\r\nimport { RootContainer, Container, Image, Text, clippingEvents, noAnimation } from '@coconut-xr/koestlich'\r\nimport Glass from './glass'\r\nimport { useThree, useFrame } from '@react-three/fiber'\r\nimport { useSpring, a } from '@react-spring/three'\r\nimport { useXR } from '@coconut-xr/natuerlich/react'\r\n\r\nexport default function Hud({ setOrbitControl, setPhotoIndex }) {\r\n  const { gl, camera } = useThree()\r\n  const isPresenting = !useXR.getState().mode === 'none'\r\n  // let pre = { position: [0, 0, -20], rotation: [10, 0, 1] }\r\n  const [props, set] = useSpring(() => ({\r\n    position: [0, 0, 0],\r\n    rotation: [0, 0, 0],\r\n    config: { mass: 1, friction: 20, tension: 50 },\r\n  }))\r\n  let xp, yp, zp, xr, yr, zr\r\n  useFrame(() => {\r\n    const getCamera = isPresenting ? pre : camera\r\n    // const getCamera = isPresenting ? gl.xr.getCamera(camera) : camera\r\n    // const getCamera = camera\r\n    const { x, y, z } = getCamera.position\r\n    const { x: rotX, y: rotY, z: rotZ } = getCamera.rotation\r\n\r\n    xp = camera.position.x\r\n    yp = camera.position.y\r\n    zp = camera.position.z\r\n    xr = camera.rotation._x\r\n    yr = camera.rotation._y\r\n    zr = camera.rotation._z\r\n    console.log(useXR.getState().mode)\r\n    set({ position: [x, y, z], rotation: [rotX, rotY, rotZ] })\r\n  })\r\n  function imgSelect(index) {\r\n    setPhotoIndex(index)\r\n    console.log(index)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <a.group position={props.position}>\r\n        <a.group rotation={props.rotation}>\r\n          {/* <a.group rotation={(xr, yr, zr)}> */}\r\n          <RootContainer\r\n            position={[0, -1, -3]}\r\n            rotation={[-0.5, 0, 0]}\r\n            sizeX={4}\r\n            sizeY={1.5}\r\n            // material={GlassMaterial}\r\n            onPointerEnter={() => setOrbitControl(false)}\r\n            onPointerLeave={() => setOrbitControl(true)}\r\n            alignItems=\"stretch\"\r\n          >\r\n            <Glass borderRadius={48} padding={64} alignItems=\"stretch\" height={'100%'}>\r\n              {/* <Container width={480} backgroundColor=\"blue\" /> */}\r\n              <Container alignItems=\"stretch\" animation={noAnimation} height={'100%'}>\r\n                <Container flexDirection=\"row\" gapColumn={48} alignItems=\"stretch\" overflow=\"scroll\" animation={noAnimation} height={'100%'}>\r\n                  <Suspense alignItems=\"stretch\" animation={noAnimation} height={'100%'}>\r\n                    {[...Array(2)].map((e, i) => (\r\n                      <Image key={'img' + i} height={'100%'} url={'/360/' + (i + 1) + '.jpg'} borderRadius={32} onClick={() => imgSelect(i)} />\r\n                    ))}\r\n                  </Suspense>\r\n                </Container>\r\n              </Container>\r\n            </Glass>\r\n          </RootContainer>\r\n        </a.group>\r\n      </a.group>\r\n    </>\r\n  )\r\n}\r\n"
        }
    ]
}