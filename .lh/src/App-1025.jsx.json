{
    "sourceFile": "src/App-1025.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1698236463759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1698236463759,
            "name": "Commit-0",
            "content": "import { OrbitControls, useTexture } from '@react-three/drei'\nimport { Canvas } from '@react-three/fiber'\nimport { XRCanvas, PointerHand, PointerController } from '@coconut-xr/natuerlich/defaults'\nimport { RootText, clippingEvents } from '@coconut-xr/koestlich'\nimport { getInputSourceId } from '@coconut-xr/natuerlich'\nimport { XWebPointers } from '@coconut-xr/xinteraction/react'\nimport { useEnterXR, NonImmersiveCamera, ImmersiveSessionOrigin, useInputSources, XR, useXR } from '@coconut-xr/natuerlich/react'\nimport { useEffect, useState } from 'react'\nimport Lenis from '@studio-freight/lenis'\nimport Glass from './Glass'\nimport Hud from './Hud'\nimport Dome from './Dome'\n\nconst lenis = new Lenis()\nfunction raf(time) {\n  lenis.raf(time)\n  requestAnimationFrame(raf)\n}\nrequestAnimationFrame(raf)\n\nconst sel = (e) => document.querySelector(e)\n\nconst sessionOptions = {\n  requiredFeatures: ['local-floor'],\n  // requiredFeatures: ['local-floor', 'hand-tracking'],\n}\n\nfunction UI() {\n  const [blue, setBlue] = useState(false)\n  return (\n    <RootText onClick={() => setBlue((blue) => !blue)} anchorX=\"center\" anchorY=\"center\" padding={0.05} backgroundColor={blue ? 'blue' : 'green'}>\n      Hello World\n    </RootText>\n  )\n}\n\nexport default function Index() {\n  const enterAR = useEnterXR('immersive-vr', sessionOptions)\n  const inputSources = useInputSources()\n\n  const [orbitControl, setOrbitControl] = useState(true)\n  const [photoIndex, setPhotoIndex] = useState(1)\n\n  const btnVr$ = sel('.btn--vr')\n  const btnPrev$ = sel('.btn--prev')\n  const btnNext$ = sel('.btn--next')\n\n  useEffect(() => {\n    btnVr$.addEventListener('click', () => {\n      enterAR()\n    })\n    btnPrev$.addEventListener('click', function e() {\n      this.removeEventListener('click', e)\n      setPhotoIndex(photoIndex > 0 ? photoIndex - 1 : 3)\n    })\n    btnNext$.addEventListener('click', function e() {\n      this.removeEventListener('click', e)\n      setPhotoIndex(photoIndex < 3 ? photoIndex + 1 : 0)\n    })\n  }, [photoIndex])\n  return (\n    <>\n      {/* <button className=\"btn\" onClick={enterAR}>\n        Enter VR\n      </button> */}\n      <XRCanvas events={clippingEvents} gl={{ localClippingEnabled: true }}>\n        <OrbitControls enableRotate={orbitControl} />\n        <ambientLight intensity={0.3} />\n        <directionalLight castShadow position={[1, 2, 3]} intensity={2} />\n        {/* <ImmersiveSessionOrigin position={[0, 0, 4]}> */}\n        {inputSources.map((inputSource) =>\n          inputSource.hand != null ? (\n            <PointerHand\n              id={getInputSourceId(inputSource)}\n              key={getInputSourceId(inputSource)}\n              inputSource={inputSource}\n              hand={inputSource.hand}\n              childrenAtJoint=\"wrist\"\n            ></PointerHand>\n          ) : (\n            <PointerController id={getInputSourceId(inputSource)} key={getInputSourceId(inputSource)} inputSource={inputSource}></PointerController>\n          )\n        )}\n        <Dome photoIndex={photoIndex} setPhotoIndex={setPhotoIndex} />\n      </XRCanvas>\n    </>\n  )\n}\n"
        }
    ]
}